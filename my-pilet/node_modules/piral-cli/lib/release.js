"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.publishArtifacts = exports.setReleaseProvider = void 0;
const path_1 = require("path");
const common_1 = require("./common");
const helpers_1 = require("./helpers");
async function getVersion(directory) {
    const data = await (0, common_1.findFile)(directory, 'package.json');
    if (!data) {
        (0, common_1.fail)('packageJsonNotFound_0020');
    }
    const { version } = require(data);
    return version;
}
const providers = {
    none() {
        return Promise.resolve();
    },
    async xcopy(_, files, args) {
        const { target } = args;
        if (!target) {
            (0, common_1.fail)('publishXcopyMissingTarget_0112');
        }
        await Promise.all(files.map(async (file) => (0, common_1.copy)(file, (0, path_1.resolve)(target, (0, path_1.basename)(file)))));
    },
    async feed(directory, files, args, interactive) {
        const { url, apiKey, scheme = 'basic', version = await getVersion(directory) } = args;
        if (!url) {
            (0, common_1.fail)('publishFeedMissingUrl_0115');
        }
        if (!version) {
            (0, common_1.fail)('publishFeedMissingVersion_0116');
        }
        const data = {
            version,
            type: 'custom',
        };
        for (const file of files) {
            const relPath = (0, path_1.relative)(directory, file);
            const fileName = (0, path_1.basename)(file);
            const content = await (0, common_1.readBinary)((0, path_1.dirname)(file), fileName);
            data[relPath] = [content, fileName];
        }
        await (0, common_1.postForm)(url, scheme, apiKey, data, {}, undefined, interactive);
    },
};
function findReleaseProvider(providerName) {
    const provider = providers[providerName];
    if (typeof provider !== 'function') {
        (0, common_1.fail)('publishProviderMissing_0113', providerName, helpers_1.availableReleaseProviders);
    }
    return provider;
}
helpers_1.availableReleaseProviders.push(...Object.keys(providers));
function setReleaseProvider(provider) {
    providers[provider.name] = provider.action;
    if (!helpers_1.availableReleaseProviders.includes(provider.name)) {
        helpers_1.availableReleaseProviders.push(provider.name);
    }
}
exports.setReleaseProvider = setReleaseProvider;
function publishArtifacts(providerName, directory, files, args, interactive) {
    const runRelease = findReleaseProvider(providerName);
    return runRelease(directory, files, args, interactive);
}
exports.publishArtifacts = publishArtifacts;
//# sourceMappingURL=release.js.map