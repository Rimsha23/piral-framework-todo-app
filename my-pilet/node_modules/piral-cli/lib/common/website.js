"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.scaffoldFromEmulatorWebsite = exports.updateFromEmulatorWebsite = void 0;
const path_1 = require("path");
const template_1 = require("./template");
const config_1 = require("./config");
const constants_1 = require("./constants");
const enums_1 = require("./enums");
const io_1 = require("./io");
const io_2 = require("./io");
const log_1 = require("./log");
const external_1 = require("../external");
function requestManifest(url) {
    const auth = config_1.config.auth?.[url];
    switch (auth?.mode) {
        case 'header':
            return external_1.axios.default.get(url, {
                headers: {
                    [auth.key]: auth.value,
                },
            });
        case 'http':
            return external_1.axios.default.get(url, {
                auth: {
                    username: auth.username,
                    password: auth.password,
                },
            });
        default:
            return external_1.axios.default.get(url);
    }
}
async function downloadEmulatorFiles(manifestUrl, target, files) {
    const requiredFiles = [files.typings, files.main, files.app];
    await Promise.all(requiredFiles.map(async (file) => {
        const url = new URL(file, manifestUrl);
        const res = await external_1.axios.default.get(url.href, { responseType: 'arraybuffer' });
        const data = res.data;
        await (0, io_1.writeBinary)(target, file, data);
    }));
}
async function createEmulatorFiles(targetDir, appDir, manifestUrl, emulatorJson) {
    const mainFile = 'index.js';
    const appDirName = (0, path_1.relative)(targetDir, appDir);
    await (0, io_2.writeJson)(targetDir, constants_1.packageJson, {
        name: emulatorJson.name,
        description: emulatorJson.description,
        version: emulatorJson.version,
        importmap: emulatorJson.importmap,
        pilets: emulatorJson.scaffolding.pilets,
        piralCLI: {
            version: emulatorJson.scaffolding.cli,
            timestamp: emulatorJson.timestamp,
            source: manifestUrl,
            generated: true,
        },
        files: emulatorJson.files.assets,
        main: (0, path_1.join)(appDirName, mainFile),
        typings: (0, path_1.join)(appDirName, emulatorJson.files.typings),
        app: (0, path_1.join)(appDirName, emulatorJson.files.app),
        peerDependencies: {},
        optionalDependencies: emulatorJson.dependencies.optional,
        devDependencies: emulatorJson.dependencies.included,
    }, true);
    // actually including this one hints that the app shell should have been included - which is forbidden
    await (0, template_1.createPiralStubIndexIfNotExists)(appDir, mainFile, enums_1.ForceOverwrite.yes, {
        name: emulatorJson.name,
        outFile: emulatorJson.files.main,
    });
    await downloadEmulatorFiles(manifestUrl, appDir, emulatorJson.files);
}
async function updateFromEmulatorWebsite(targetDir, manifestUrl) {
    (0, log_1.progress)(`Updating emulator from %s ...`, manifestUrl);
    try {
        const response = await requestManifest(manifestUrl);
        const nextEmulator = response.data;
        const currentEmulator = await (0, io_1.readJson)(targetDir, constants_1.packageJson);
        if (currentEmulator.name !== nextEmulator.name) {
            (0, log_1.log)('remoteEmulatorNameChanged_0121', currentEmulator.name);
        }
        else if (currentEmulator.piralCLI.timstamp !== nextEmulator.timestamp) {
            (0, log_1.log)('generalDebug_0003', `The timestamp on "${currentEmulator.name}" is different (${nextEmulator.timestamp}).`);
            const appDir = (0, path_1.resolve)(targetDir, 'app');
            await createEmulatorFiles(targetDir, appDir, manifestUrl, nextEmulator);
        }
        else {
            (0, log_1.log)('generalDebug_0003', `Nothing to update for "${currentEmulator.name}".`);
        }
    }
    catch (ex) {
        (0, log_1.log)('generalDebug_0003', `HTTP request for emulator update failed: ${ex}`);
        (0, log_1.log)('skipEmulatorUpdate_0120', manifestUrl);
    }
}
exports.updateFromEmulatorWebsite = updateFromEmulatorWebsite;
async function scaffoldFromEmulatorWebsite(rootDir, manifestUrl) {
    (0, log_1.progress)(`Downloading emulator from %s ...`, manifestUrl);
    const response = await requestManifest(manifestUrl);
    const emulatorJson = response.data;
    const targetDir = (0, path_1.resolve)(rootDir, 'node_modules', emulatorJson.name);
    const appDir = (0, path_1.resolve)(targetDir, 'app');
    await (0, io_1.createDirectory)(appDir);
    await createEmulatorFiles(targetDir, appDir, manifestUrl, emulatorJson);
    return { name: emulatorJson.name, path: targetDir };
}
exports.scaffoldFromEmulatorWebsite = scaffoldFromEmulatorWebsite;
//# sourceMappingURL=website.js.map