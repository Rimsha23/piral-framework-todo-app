"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const validateOptions = require("schema-utils");
const loader_utils_1 = require("loader-utils");
const schema = {
    type: 'object',
    properties: {},
    additionalProperties: false,
};
function reloadGenerator(name) {
    delete require.cache[require.resolve(name)];
    return require(name);
}
async function loader(source, map, meta) {
    const options = (0, loader_utils_1.getOptions)(this);
    validateOptions(schema, options, {
        name: 'Codegen Loader',
        baseDataPath: 'options',
    });
    const name = this.resourcePath;
    const compiler = this._compiler;
    const callback = this.async();
    try {
        const generator = reloadGenerator(name);
        const content = await generator.call({
            name,
            options: {
                outDir: compiler?.options?.output?.path,
                rootDir: process.cwd(),
            },
            addDependency: (file, options = {}) => this.addDependency(file),
        });
        if (typeof content === 'string') {
            callback(null, content, map, meta);
        }
        else {
            callback(new Error('Unsupported return type from codegen.'), source);
        }
    }
    catch (err) {
        callback(err, source);
    }
}
exports.default = loader;
//# sourceMappingURL=index.js.map