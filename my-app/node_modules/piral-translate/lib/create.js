"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLocaleApi = exports.setupLocalizer = void 0;
const deepmerge = require("deepmerge");
const actions_1 = require("./actions");
const localize_1 = require("./localize");
const default_1 = require("./default");
const flatten_translations_1 = require("./flatten-translations");
/**
 * Sets up a new localizer by using the given config.
 * @param config The configuration for the new localizer.
 */
function setupLocalizer(config = {}) {
    const msgs = config.messages || {};
    const languages = Object.keys(msgs);
    const defaultLang = languages[0] || 'en';
    const computeLang = config.language;
    const usedLang = typeof computeLang === 'function' ? computeLang(languages, defaultLang, 'en') : computeLang;
    const language = usedLang || defaultLang;
    return new localize_1.Localizer(msgs, language, languages.length ? languages : [language], config.fallback);
}
exports.setupLocalizer = setupLocalizer;
/**
 * Creates new Pilet API extensions for localization.
 * @param localizer The specific localizer to be used, if any.
 */
function createLocaleApi(localizer = setupLocalizer()) {
    return (context) => {
        context.defineActions((0, actions_1.createActions)(localizer));
        context.dispatch((state) => ({
            ...state,
            components: {
                LanguagesPicker: default_1.DefaultPicker,
                ...state.components,
            },
            language: {
                loading: false,
                available: localizer.languages,
                selected: localizer.language,
            },
        }));
        return (api) => {
            let localTranslations = {};
            const setTranslations = (messages) => {
                localTranslations = (0, flatten_translations_1.flattenTranslations)(messages);
            };
            return {
                addTranslations(messages, isOverriding = true) {
                    const current = localizer.messages;
                    setTranslations(deepmerge.all(isOverriding ? [current, ...messages] : [...messages, current]));
                },
                getCurrentLanguage(cb) {
                    const selected = context.readState((s) => s.language.selected);
                    if (cb) {
                        cb(selected);
                        const handler = (ev) => {
                            cb(ev.currentLanguage);
                        };
                        api.on('select-language', handler);
                        return () => api.off('select-language', handler);
                    }
                    return selected;
                },
                setTranslations,
                getTranslations() {
                    return localTranslations;
                },
                translate(tag, variables) {
                    return localizer.localizeLocal(localTranslations, tag, variables);
                },
            };
        };
    };
}
exports.createLocaleApi = createLocaleApi;
//# sourceMappingURL=create.js.map