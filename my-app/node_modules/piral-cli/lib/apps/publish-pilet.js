"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.publishPilet = exports.publishPiletDefaults = void 0;
const path_1 = require("path");
const bundler_1 = require("../bundler");
const types_1 = require("../types");
const common_1 = require("../common");
exports.publishPiletDefaults = {
    url: undefined,
    apiKey: undefined,
    fresh: false,
    cert: undefined,
    logLevel: types_1.LogLevels.info,
    schemaVersion: undefined,
    mode: 'basic',
    from: 'local',
    fields: {},
    headers: {},
    interactive: false,
};
function isSubDir(parent, dir) {
    const rel = (0, path_1.relative)(parent, dir);
    return rel && !rel.startsWith('..') && !(0, path_1.isAbsolute)(rel);
}
async function getFiles(baseDir, sources, from, fresh, originalSchemaVersion, logLevel, bundlerName, _, ca) {
    if (fresh) {
        (0, common_1.log)('generalDebug_0003', 'Detected "--fresh". Trying to resolve the package.json.');
        const allEntries = await (0, common_1.matchAnyPilet)(baseDir, sources);
        if (allEntries.length === 0) {
            (0, common_1.fail)('entryFileMissing_0077');
        }
        return await Promise.all(allEntries.map(async (entryModule) => {
            const targetDir = (0, path_1.dirname)(entryModule);
            (0, common_1.progress)('Triggering pilet build ...');
            const { root, piletPackage, importmap, peerDependencies, peerModules, apps, schema } = await (0, common_1.retrievePiletData)(targetDir);
            const schemaVersion = originalSchemaVersion || schema || common_1.config.schemaVersion || common_1.defaultSchemaVersion;
            const piralInstances = apps.map((m) => m.appPackage.name);
            const defaultOutput = 'dist/index.js';
            const { main = defaultOutput, name = 'pilet' } = piletPackage;
            const propDest = (0, path_1.resolve)(root, main);
            const propDestDir = (0, path_1.dirname)(propDest);
            (0, common_1.log)('generalDebug_0003', `Pilet "${name}" is supposed to generate artifact in "${propDest}".`);
            const usePropDest = propDestDir !== root && propDestDir !== targetDir && isSubDir(root, propDest);
            const dest = usePropDest ? propDest : (0, path_1.resolve)(root, defaultOutput);
            (0, common_1.log)('generalDebug_0003', `Pilet "${name}" is generating artifact in "${dest}".`);
            const outDir = (0, path_1.dirname)(dest);
            const outFile = (0, path_1.basename)(dest);
            const externals = (0, common_1.combinePiletExternals)(piralInstances, peerDependencies, peerModules, importmap);
            (0, common_1.log)('generalDebug_0003', `Pilet "${name}" uses externals: ${externals.join(', ')}.`);
            (0, common_1.progress)('Removing output directory ...');
            await (0, common_1.removeDirectory)(outDir);
            (0, common_1.logInfo)('Bundle pilet ...');
            await (0, bundler_1.callPiletBuild)({
                root,
                piralInstances,
                optimizeModules: false,
                sourceMaps: true,
                watch: false,
                contentHash: true,
                minify: true,
                externals,
                targetDir,
                importmap,
                outFile,
                outDir,
                entryModule: `./${(0, path_1.relative)(root, entryModule)}`,
                logLevel,
                version: schemaVersion,
                ignored: [],
                _,
            }, bundlerName);
            (0, common_1.log)('generalDebug_0003', `Pilet "${name}" built successfully!`);
            (0, common_1.progress)('Triggering pilet pack ...');
            const file = await (0, common_1.createPiletPackage)(root, '.', '.');
            (0, common_1.log)('generalDebug_0003', `Pilet "${name}" packed successfully!`);
            return file;
        }));
    }
    else {
        (0, common_1.log)('generalDebug_0003', `Did not find fresh flag. Trying to match from "${from}".`);
        switch (from) {
            case 'local': {
                (0, common_1.log)('generalDebug_0003', `Matching files using "${sources.join('", "')}".`);
                const allFiles = await Promise.all(sources.map((s) => (0, common_1.matchFiles)(baseDir, s)));
                return allFiles.reduce((result, files) => [...result, ...files], []);
            }
            case 'remote': {
                (0, common_1.log)('generalDebug_0003', `Download file from "${sources.join('", "')}".`);
                const allFiles = await Promise.all(sources.map((s) => (0, common_1.downloadFile)(s, ca)));
                return allFiles.reduce((result, files) => [...result, ...files], []);
            }
            case 'npm': {
                (0, common_1.log)('generalDebug_0003', `View npm package "${sources.join('", "')}".`);
                const allUrls = await Promise.all(sources.map((s) => (0, common_1.findNpmTarball)(s)));
                (0, common_1.log)('generalDebug_0003', `Download file from "${allUrls.join('", "')}".`);
                const allFiles = await Promise.all(allUrls.map((url) => (0, common_1.downloadFile)(url, ca)));
                return allFiles.reduce((result, files) => [...result, ...files], []);
            }
        }
    }
}
async function publishPilet(baseDir = process.cwd(), options = {}) {
    const { fresh = exports.publishPiletDefaults.fresh, source = fresh ? './src/index' : '*.tgz', url = common_1.config.url ?? exports.publishPiletDefaults.url, apiKey = common_1.config.apiKeys?.[url] ?? common_1.config.apiKey ?? exports.publishPiletDefaults.apiKey, logLevel = exports.publishPiletDefaults.logLevel, from = exports.publishPiletDefaults.from, schemaVersion = exports.publishPiletDefaults.schemaVersion, cert = common_1.config.cert ?? exports.publishPiletDefaults.cert, fields = exports.publishPiletDefaults.fields, headers = exports.publishPiletDefaults.headers, mode = exports.publishPiletDefaults.mode, interactive = exports.publishPiletDefaults.interactive, _ = {}, bundlerName, } = options;
    const fullBase = (0, path_1.resolve)(process.cwd(), baseDir);
    (0, common_1.setLogLevel)(logLevel);
    (0, common_1.progress)('Reading configuration ...');
    if (!url) {
        (0, common_1.fail)('missingPiletFeedUrl_0060');
    }
    (0, common_1.log)('generalDebug_0003', 'Checking if certificate exists.');
    let ca = undefined;
    if (await (0, common_1.checkExists)(cert)) {
        const dir = (0, path_1.dirname)(cert);
        const file = (0, path_1.basename)(cert);
        (0, common_1.log)('generalDebug_0003', `Reading certificate file "${file}" from "${dir}".`);
        ca = await (0, common_1.readBinary)(dir, file);
    }
    (0, common_1.log)('generalDebug_0003', 'Getting the tgz files ...');
    const sources = Array.isArray(source) ? source : [source];
    const files = await getFiles(fullBase, sources, from, fresh, schemaVersion, logLevel, bundlerName, _, ca);
    const successfulUploads = [];
    (0, common_1.log)('generalDebug_0003', 'Received available tgz files.');
    if (files.length === 0) {
        (0, common_1.fail)('missingPiletTarball_0061', sources);
    }
    (0, common_1.log)('generalInfo_0000', `Using feed service "${url}".`);
    for (const file of files) {
        (0, common_1.log)('generalDebug_0003', 'Reading the file for upload ...');
        const fileName = (0, path_1.relative)(fullBase, file);
        const content = await (0, common_1.readBinary)(fullBase, fileName);
        if (content) {
            (0, common_1.progress)(`Publishing "%s" ...`, file, url);
            const result = await (0, common_1.postFile)(url, mode, apiKey, content, fields, headers, ca, interactive);
            if (result.success) {
                successfulUploads.push(file);
                if (result.response) {
                    (0, common_1.log)('httpPostResponse_0067', result);
                }
                (0, common_1.progress)(`Published successfully!`);
            }
            else if (result.status === 402) {
                (0, common_1.log)('failedToUploadPayment_0161', result.response);
            }
            else if (result.status === 409) {
                (0, common_1.log)('failedToUploadVersion_0162', result.response);
            }
            else if (result.status === 413) {
                (0, common_1.log)('failedToUploadSize_0163', result.response);
            }
            else {
                (0, common_1.log)('failedToUpload_0062', fileName);
            }
        }
        else {
            (0, common_1.log)('failedToRead_0063', fileName);
        }
        (0, common_1.log)('generalDebug_0003', 'Finished uploading the file.');
    }
    if (files.length === successfulUploads.length) {
        (0, common_1.logDone)(`Pilet(s) published successfully!`);
    }
    else {
        (0, common_1.fail)('failedUploading_0064');
    }
}
exports.publishPilet = publishPilet;
//# sourceMappingURL=publish-pilet.js.map