"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.publishPiral = exports.publishPiralDefaults = void 0;
const path_1 = require("path");
const release_1 = require("../release");
const types_1 = require("../types");
const common_1 = require("../common");
exports.publishPiralDefaults = {
    source: './dist',
    logLevel: types_1.LogLevels.info,
    type: 'all',
    provider: 'none',
    opts: {},
    interactive: false,
};
async function publishEmulator(baseDir, source, args = {}, interactive = false) {
    const type = 'emulator';
    const directory = (0, path_1.resolve)(baseDir, source, type);
    const exists = await (0, common_1.checkExists)(directory);
    if (!exists) {
        (0, common_1.fail)('publishDirectoryMissing_0110', directory);
    }
    const files = await (0, common_1.matchFiles)(directory, '*.tgz');
    (0, common_1.log)('generalDebug_0003', `Found ${files.length} in "${directory}": ${files.join(', ')}`);
    if (files.length !== 1) {
        (0, common_1.fail)('publishEmulatorFilesUnexpected_0111', directory);
    }
    const [file] = files;
    const flags = Object.keys(args).reduce((p, c) => {
        p.push(`--${c}`, args[c]);
        return p;
    }, []);
    await (0, common_1.publishNpmPackage)(directory, file, flags, interactive);
}
async function publishRelease(baseDir, source, providerName, args = {}, interactive = false) {
    const type = 'release';
    const directory = (0, path_1.resolve)(baseDir, source, type);
    const exists = await (0, common_1.checkExists)(directory);
    if (!exists) {
        (0, common_1.fail)('publishDirectoryMissing_0110', directory);
    }
    const files = await (0, common_1.matchFiles)(directory, '**/*');
    (0, common_1.log)('generalDebug_0003', `Found ${files.length} in "${directory}": ${files.join(', ')}`);
    await (0, release_1.publishArtifacts)(providerName, directory, files, args, interactive);
}
async function publishPiral(baseDir = process.cwd(), options = {}) {
    const { source = exports.publishPiralDefaults.source, type = exports.publishPiralDefaults.type, logLevel = exports.publishPiralDefaults.logLevel, opts = exports.publishPiralDefaults.opts, provider = exports.publishPiralDefaults.provider, interactive = exports.publishPiralDefaults.interactive, } = options;
    const fullBase = (0, path_1.resolve)(process.cwd(), baseDir);
    (0, common_1.setLogLevel)(logLevel);
    if (type === 'emulator-sources') {
        (0, common_1.fail)('publishEmulatorSourcesInvalid_0114');
    }
    (0, common_1.progress)('Reading configuration ...');
    if (type !== 'release') {
        (0, common_1.progress)('Publishing emulator package ...');
        await publishEmulator(fullBase, source, opts, interactive);
        (0, common_1.logDone)(`Successfully published emulator.`);
        (0, common_1.logReset)();
    }
    if (type !== 'emulator') {
        (0, common_1.progress)('Publishing release files ...');
        await publishRelease(fullBase, source, provider, opts, interactive);
        (0, common_1.logDone)(`Successfully published release.`);
        (0, common_1.logReset)();
    }
}
exports.publishPiral = publishPiral;
//# sourceMappingURL=publish-piral.js.map