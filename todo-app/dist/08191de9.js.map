{"version":3,"file":"08191de9.js","mappings":"yhDASA,mBACE,IAGEA,EAAAC,GAHwBC,EAAAA,EAAAA,UAAiB,CACzC,CAAEC,GAAI,EAAGC,MAAO,qBAAsBC,WAAW,GACjD,CAAEF,GAAI,EAAGC,MAAO,aAAcC,WAAW,KACzC,GAHKC,EAAKN,EAAA,GAAEO,EAAQP,EAAA,GAI4BQ,EAAAP,GAApBC,EAAAA,EAAAA,UAAiB,IAAG,GAA3CO,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GACkCG,EAAAV,GAApBC,EAAAA,EAAAA,WAAkB,GAAE,GAArDU,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAqC9BG,EAAoB,SAACC,GACzBL,EAAWK,EAAEC,OAAOC,MACtB,EAEA,OACEC,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,OAAKC,UAAU,aACbD,EAAAA,cAAA,OAAKC,UAAU,kBACfD,EAAAA,cAAA,MAAIC,UAAU,WAAS,aACvBD,EAAAA,cAAA,OAAKC,UAAU,0BACbD,EAAAA,cAAA,SACEE,KAAK,OACLD,UAAU,eACVE,YAAY,iBACZJ,MAAOR,EACPa,SAAUR,KAEO,IAAlBF,EACCM,EAAAA,cAAA,UAAQC,UAAU,aAAaI,QArDzB,WACd,IAAMC,EAAsB,CAAErB,GAAIG,EAAMmB,OAAS,EAAGrB,MAAOK,EAASJ,WAAW,GAC/EE,EAAS,GAADmB,OAAAC,EAAKrB,GAAK,CAAEkB,KACpBd,EAAW,GACb,GAiDyD,OAI/CQ,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,UAAQC,UAAU,aAAaI,QA1C1B,WACf,IAAMK,EAAYD,EAAOrB,GACzBsB,EAAahB,GAAcR,MAAQK,EACnCF,EAASqB,GACTf,GAAiB,GACjBH,EAAW,GACb,GAoC4D,QAGhDQ,EAAAA,cAAA,UAAQC,UAAU,gBAAgBI,QArC3B,WACjBV,GAAiB,GACjBH,EAAW,GACb,GAkCiE,YAM3DQ,EAAAA,cAAA,MAAIf,GAAG,WAAWgB,UAAU,aACzBb,EAAMuB,KAAI,SAACC,EAAMC,GAAK,OACrBb,EAAAA,cAAA,MAAIc,IAAKD,EAAOZ,UAAU,aACxBD,EAAAA,cAAA,OAAKC,UAAU,gBACbD,EAAAA,cAAA,SACEE,KAAK,WACLD,UAAU,WACVc,QAASH,EAAKzB,UACdiB,SAAU,kBA9CF,SAACS,GACvB,IAAMH,EAAYD,EAAOrB,GACzBsB,EAAaG,GAAO1B,WAAauB,EAAaG,GAAO1B,UACrDE,EAASqB,EACX,CA0CgCM,CAAgBH,EAAM,IAEvCnB,IAAiBmB,EAChBb,EAAAA,cAAA,SAAOE,KAAK,OAAOH,MAAOR,EAASa,SAAUR,IAE7CI,EAAAA,cAAA,QAAMC,UAAS,cAAAO,OAAgBI,EAAKzB,UAAY,YAAc,KAC3DyB,EAAK1B,QAIdc,EAAAA,cAAA,OAAKC,UAAU,yBACbD,EAAAA,cAAA,UAAQC,UAAU,gBAAgBI,QAAS,kBAhFpC,SAACQ,GAClB,IAAMI,EAAgB7B,EAAM8B,QAAO,SAACC,EAAGC,GAAC,OAAKA,IAAMP,CAAK,IACxDxB,EAAS4B,EACX,CA6E6DI,CAAWR,EAAM,aAIlEb,EAAAA,cAAA,UAAQC,UAAU,cAAcI,QAAS,kBA/EhC,SAACQ,GACpBlB,EAAgBkB,GAChBrB,EAAWJ,EAAMyB,GAAO3B,MAC1B,CA4E2DoC,CAAaT,EAAM,YAI/D,OAOhB,C","sources":["webpack://pr_todoapp/./src/Page.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useState, ChangeEvent } from 'react';\nimport './page.css';\ninterface Task {\n  id: number;\n  title: string;\n  completed: boolean;\n}\n\nexport default () => {\n  const [tasks, setTasks] = useState<Task[]>([\n    { id: 1, title: 'Charge your laptop', completed: false },\n    { id: 2, title: 'Buy apples', completed: false },\n  ]);\n  const [newTask, setNewTask] = useState<string>('');\n  const [editingIndex, setEditingIndex] = useState<number>(-1);\n\n  const addTask = () => {\n    const newTaskObject: Task = { id: tasks.length + 1, title: newTask, completed: false };\n    setTasks([...tasks, newTaskObject]);\n    setNewTask('');\n  };\n\n  const removeTask = (index: number) => {\n    const filteredTasks = tasks.filter((_, i) => i !== index);\n    setTasks(filteredTasks);\n  };\n\n  const startEditing = (index: number) => {\n    setEditingIndex(index);\n    setNewTask(tasks[index].title);\n  };\n\n  const saveEdit = () => {\n    const updatedTasks = [...tasks];\n    updatedTasks[editingIndex].title = newTask;\n    setTasks(updatedTasks);\n    setEditingIndex(-1);\n    setNewTask('');\n  };\n\n  const cancelEdit = () => {\n    setEditingIndex(-1);\n    setNewTask('');\n  };\n\n  const toggleCompleted = (index: number) => {\n    const updatedTasks = [...tasks];\n    updatedTasks[index].completed = !updatedTasks[index].completed;\n    setTasks(updatedTasks);\n  };\n\n  const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setNewTask(e.target.value);\n  };\n\n  return (\n    <>\n      <div className=\"container\">\n        <div className='todo-container'>\n        <h1 className=\"heading\">Todo List</h1>\n        <div className=\"custom-input-container\">\n          <input\n            type=\"text\"\n            className=\"custom-input\"\n            placeholder=\"Add a new task\"\n            value={newTask}\n            onChange={handleInputChange}\n          />\n          {editingIndex === -1 ? (\n            <button className=\"add-button\" onClick={addTask}>\n              Add\n            </button>\n          ) : (\n            <>\n              <button className=\"add-button\" onClick={saveEdit}>\n                Save\n              </button>\n              <button className=\"remove-button\" onClick={cancelEdit}>\n                Cancel\n              </button>\n            </>\n          )}\n        </div>\n        <ul id=\"tasklist\" className=\"task-list\">\n          {tasks.map((task, index) => (\n            <li key={index} className=\"task-item\">\n              <div className=\"task-content\">\n                <input\n                  type=\"checkbox\"\n                  className=\"checkbox\"\n                  checked={task.completed}\n                  onChange={() => toggleCompleted(index)}\n                />\n                {editingIndex === index ? (\n                  <input type=\"text\" value={newTask} onChange={handleInputChange} />\n                ) : (\n                  <span className={`task-title ${task.completed ? 'completed' : ''}`}>\n                    {task.title}\n                  </span>\n                )}\n              </div>\n            <div className='action-btns-container'>\n              <button className=\"remove-button\" onClick={() => removeTask(index)}>\n                Remove\n              </button>\n\n              <button className=\"edit-button\" onClick={() => startEditing(index)}>\n                Edit\n              </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n        </div>\n      </div>\n    </>\n  );\n};\n"],"names":["_useState2","_slicedToArray","useState","id","title","completed","tasks","setTasks","_useState4","newTask","setNewTask","_useState6","editingIndex","setEditingIndex","handleInputChange","e","target","value","React","className","type","placeholder","onChange","onClick","newTaskObject","length","concat","_toConsumableArray","updatedTasks","map","task","index","key","checked","toggleCompleted","filteredTasks","filter","_","i","removeTask","startEditing"],"sourceRoot":""}